# -*- coding: utf-8 -*-
"""week 4 Geoffrey Korir -Introduction to Machine Learning Individual Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UVroTq_x9Jp6P8EghldJTR6s7ofFPJmA

# Introduction to Machine Learning

## Problem Statement

#### **Background Information**

HR analytics is revolutionising the way human resources departments operate, leading to higher efficiency and better results overall. Human resources have been using analytics for years. However, the collection, processing, and analysis of data have been largely manual, and given the nature of human resources dynamics and HR KPIs, the approach has been constraining HR. Therefore, it is surprising that HR departments woke up to the utility of machine learning so late in the game.

#### **Problem Statement**

Your client is a large Multinational Corporation, and they have nine broad verticals across the organization. One of the problems your client faces is identifying the right people for promotion (only for the manager position and below) and preparing them in time. Currently the process, they are following is: 



*   They first identify a set of employees based on recommendations/ past performance.
*   Selected employees go through the separate training and evaluation program for each vertical. 
*  These programs are based on the required skill of each vertical. At the end of the program, based on various factors such as training performance, KPI completion (only employees with KPIs completed greater than 60% are considered) etc., the employee gets a promotion.

For the process mentioned above, the final promotions are only announced after the evaluation, and this leads to a delay in transition to their new roles. Hence, the company needs your help in identifying the eligible candidates at a particular checkpoint so that they can expedite the entire promotion cycle. 

They have provided multiple attributes around employeesâ€™ past and current performance along with demographics. Now, The task is to predict whether a potential promotee at a checkpoint will be promoted or not after the evaluation process.

## Data Exploration
"""

import pandas as pd
import numpy as np

# Dataset URL: https://bit.ly/2ODZvLCHRDataset
# glossary URL = 'https://bit.ly/2Wz3sWcGlossary'

df = pd.read_csv('https://bit.ly/2ODZvLCHRDataset')

df.head()

#geting the rows and columns
df.shape

# Describing the Data
df.info()

#Finding out data on targets
df['is_promoted'].value_counts()

# percentage values of promoted vs not promoted employees
print('1. employees not promoted as a % ' 
      + str(round(((df["is_promoted"].isin([0]).sum())/df.shape[0])*100,2)) + ' %')
print('2. employees promoted as a % ' 
      + str(round(((df["is_promoted"].isin([1]).sum())/df.shape[0])*100,2)) + ' %')

"""##Data Preparation"""

#strip leading and trailing spaces
df.columns = df.columns.str.strip()

# check for missing data in a dataset.
df.isna().sum()

# dealing with missing data previous_year_rating column with the mean
mean_value = df['previous_year_rating'].mean()
df['previous_year_rating'].fillna(value=mean_value, inplace=True)

# dealing with missing education value with no education
df['education'].fillna(value="No Education", inplace=True)

#check for missing records to confirm replacement
df.isna().sum()

#perform data type conversion to fix previous year rating to int
df['previous_year_rating'] = df['previous_year_rating'].astype(np.int64)

#Recheck data types
df.info()

#find and remove any duplicate records from our df.
df.duplicated().sum()

# whats the correlation of features and target

import matplotlib.pyplot as plt
import seaborn as sns

features = ['no_of_trainings','age','previous_year_rating','length_of_service','KPIs_met >80%','awards_won?','avg_training_score','is_promoted']
corr_= df[features].corr()
plt.figure(figsize=(10,8))
sns.heatmap(corr_, annot=True, fmt = ".2f", cmap = "Spectral");

# plot Histogram for features to show relationship between them and target 
for feature in features[:-1]:
  plt.hist(df[df['is_promoted']==1][feature], color= 'green', alpha = 0.7, label = 'Promoted', density=True)
  plt.hist(df[df['is_promoted']==0][feature], color= 'pink', alpha = 0.7, label = 'Not Promoted', density=True)
  plt.title(feature)
  plt.ylabel('Probability')
  plt.xlabel(feature)
  plt.legend()
  plt.show()

"""**Observation**

Features like previous year rating, KPIs_met >80%, and awards won show that you are more likely to be promoted

##Data Modeling
"""

#defining features and target

#import the necessary functions from sklearn
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split


features = df.drop(['education', 'recruitment_channel', 'is_promoted', 'department','region','gender'], axis=1)
target = df['is_promoted']

x_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

model = DecisionTreeClassifier()
model.fit(x_train, y_train)

test_predictions = model.predict(x_test)

print('Predictions:', test_predictions)
print('Correct answers:', y_test.values)

# Check our model's acuracy
from sklearn.metrics import accuracy_score 
score = accuracy_score(y_test, test_predictions)  
score

"""##Summary of Findings and Recommendations

Before training our model, data wrangling techniques was performed. i was able to relate the relationship of target and features using heatmap and histogram. 

We were able to train a model using DecisionTreeClassifier() with an accuracy of 87% which is between the allowed range.

this model can be used by resources department to predict candidates eligible for promotion
"""